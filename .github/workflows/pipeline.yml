name: PR

on: [push]

env:
  TF_LOG: INFO
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACESS_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}

jobs:
  test: 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go 🤲
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.5'
      
      - name: Test 🤘
        run: go test -v ./...

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go 🤲
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.5'

      - name: Build 🏋️
        run: env GOOS=linux GOARCH=arm64 go build -o bootstrap main.go

      - name: Package 🎁
        run: zip lambda.zip bootstrap

      - name: Upload Artifact 👆
        uses: actions/upload-artifact@v3
        with:
          name: lambda
          path: lambda.zip
          retention-days: 5

  deploy:
    needs: 
      - build
      - test
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Download lambda.zip 👇
      uses: actions/download-artifact@v3
      with:
        name: lambda
        path: ./terraform
    
    - name: Setup Terraform 🤲
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.1.7"

    - name: Terraform init 🌛
      id: init
      run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"
  
    - name: Terraform format 💁
      id: fmt
      run: terraform fmt -check

    - name: Terraform Validate 🚦
      id: validate
      run: terraform validate

    - name: Terraform Plan 🍆
      id: plan
      run: terraform plan -input=false
      continue-on-error: true

    - name: Terraform Plan Status 🚅
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply 🍎
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
      run: |
        terraform apply -input=false -auto-approve \
        -var="access_key=${{ secrets.AWS_ACCESS_KEY }}" \
        -var="secret_key=${{ secrets.AWS_SECRET_ACESS_KEY }}"